import os
from dotenv import load_dotenv
import re
import langid
from groq import Groq

# Load environment variables
load_dotenv()
groq_api_key = os.getenv("GROQ_API_KEY")

# Initialize the Groq client
client = Groq(api_key=groq_api_key)

# Restrict `langid` to only detect English, Tamil, and Sinhala
langid.set_languages(["en", "ta", "si"])

def detect_language(text):
    """Detects language using both langid and Unicode fallback to ensure accuracy."""
    detected_lang, confidence = langid.classify(text)

    # Stronger Sinhala & Tamil Unicode check
    if re.search(r'[\u0D80-\u0DFF]', text):  # Sinhala Unicode range
        return 'si'
    elif re.search(r'[\u0B80-\u0BFF]', text):  # Tamil Unicode range
        return 'ta'

    return detected_lang  # Return langid result if no Unicode match

def get_response(question):
    if not question.strip():
        return "Please provide a valid question."

    # Detect the language of the question
    lang = detect_language(question)

    # Reference URL
    urls = """
    **Relevant Insurance Source:**
    - [Ceylinco Life](https://www.ceylincolife.com/)
    """

    # English Prompt Template
    template_en = f"""You are a specialized insurance assistant designed to provide **accurate**, **reliable**, and **up-to-date** information.

    Your responses should be:
    - **Clear and structured** (point-wise format)
    - **Focused on insurance policies, benefits, and coverage**
    - **Rooted in trusted sources** like Ceylinco Life

    Reference the following source for insights:
    {urls}

    Begin with a warm and engaging introduction before delivering your response professionally and insightfully.

    Question: {question}

    Answer:
    """

    # Tamil Prompt Template
    template_ta = f"""роирпАроЩрпНроХро│рпН роТро░рпБ роироорпНрокроХрооро╛рой роХро╛рокрпНрокрпАроЯрпНроЯрпБ роЙродро╡ро┐ропро╛ро│ро░рпН. роирпАроЩрпНроХро│рпН ро╡ро┤роЩрпНроХрпБроорпН родроХро╡ро▓рпНроХро│рпН **родрпБро▓рпНро▓ро┐ропрооро╛ройро╡рпИ**, **роироорпНрокроХрооро╛ройро╡рпИ**, рооро▒рпНро▒рпБроорпН **роЪроорпАрокродрпНродро┐ропро╡рпИ** роЖроХ роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН.

    роЙроЩрпНроХро│рпН рокродро┐ро▓рпНроХро│рпН:
    - **роЪро░ро│рооро╛роХро╡рпБроорпН роЪрпБро░рпБроХрпНроХрооро╛роХро╡рпБроорпН** роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН (рокрпБро│рпНро│ро┐ро╡ро┐ро╡ро░ ро╡роЯро┐ро╡родрпНродро┐ро▓рпН)
    - **роХро╛рокрпНрокрпАроЯрпНроЯрпБ родро┐роЯрпНроЯроЩрпНроХро│рпН, рокропройрпНроХро│рпН рооро▒рпНро▒рпБроорпН рокро╛родрпБроХро╛рокрпНрокрпИ** роорпИропрооро╛роХроХрпН роХрпКро│рпНро│ ро╡рпЗрогрпНроЯрпБроорпН
    - **роироорпНрокроХрооро╛рой роЖродро╛ро░роЩрпНроХро│рпИ** роЕроЯро┐рокрпНрокроЯрпИропро╛роХроХрпН роХрпКро│рпНро│ ро╡рпЗрогрпНроЯрпБроорпН (Ceylinco Life)

    роирпАроЩрпНроХро│рпН роЗроирпНрод роорпВро▓родрпНродрпИ рокро╛ро░рпНроХрпНроХро▓ро╛роорпН:
    {urls}

    роХрпЗро│рпНро╡ро┐роХрпНроХро╛рой рокродро┐ро▓рпИ ро╡ро┤роЩрпНроХрпБро╡родро▒рпНроХрпБ роорпБройрпНрокрпБ, роЙроЩрпНроХро│рпИ ро╡ро░ро╡рпЗро▒рпНро▒рпБ роТро░рпБ роироЯрпНрокро╛рой роЕро▒ро┐роорпБроХродрпНродрпБроЯройрпН родрпКроЯроЩрпНроХрпБроЩрпНроХро│рпН.

    роХрпЗро│рпНро╡ро┐: {question}

    рокродро┐ро▓рпН:
    """

    # Sinhala Prompt Template
    template_si = f"""р╢Фр╢╢ р╖Ар╖Тр╖Бр╖Кр╖Ар╖Пр╖Гр╢пр╖Пр╢║р╢Ъ р╢╗р╢Ър╖Кр╖Вр╢л р╖Гр╖Др╢║р╢Ър╢║р╖Щр╢Ър╖Т. р╢Фр╢╢ р╖Гр╢┤р╢║р╢▒ р╢нр╖Ьр╢╗р╢нр╖Фр╢╗р╖Ф **р╢▒р╖Тр╢╗р╖Ар╢пр╖КтАНр╢║**, **р╖Ар╖Тр╖Бр╖Кр╖Ар╖Пр╖Гр╢пр╖Пр╢║р╢Ъ**, р╖Гр╖Д **р╢║р╖Пр╖Ар╢нр╖Кр╢Ър╖Пр╢╜р╖Ур╢▒** р╖Ар╖Тр╢║ р╢║р╖Фр╢нр╖Фр╢║.

    р╢Фр╢╢р╖Ъ р╢┤р╖Тр╖Ер╖Тр╢нр╖Фр╢╗р╖Ф:
    - **р╖Гр╢╗р╢╜ р╖Др╖П р╢Ър╖Кр╢╗р╢╕р╖Пр╢▒р╖Фр╢Ър╖Цр╢╜** р╖Ар╖Тр╢║ р╢║р╖Фр╢нр╖Фр╢║ (р╢╜р╢Ър╖Фр╢лр╖Ф р╖Ар╖Бр╢║р╖Щр╢▒р╖К)
    - **р╢╗р╢Ър╖Кр╖Вр╢л р╢┤р╖Кр╢╗р╢нр╖Тр╢┤р╢нр╖Кр╢нр╖Т, р╢┤р╖Кр╢╗р╢нр╖Тр╢╜р╖Пр╢╖ р╖Гр╖Д р╢Жр╖Ар╢╗р╢лр╢║** р╢Ър╖Щр╢╗р╖Щр╖Др╖Т р╢Ер╖Ар╢░р╖Пр╢▒р╢║ р╢║р╖Ьр╢╕р╖Ф р╢Ър╢╗р╢▒р╖Кр╢▒
    - **р╖Ар╖Тр╖Бр╖Кр╖Ар╖Гр╢▒р╖Ур╢║ р╢╕р╖Цр╢╜р╖Пр╖Бр╖Кр╢╗** р╢╕р╢н р╢┤р╢пр╢▒р╢╕р╖К р╖Ар╖Тр╢║ р╢║р╖Фр╢нр╖Фр╢║ (Ceylinco Life)

    р╢Фр╢╢р╢з р╢╕р╖Щр╢╕ р╢╕р╖Цр╢╜р╖Пр╖Бр╖Кр╢╗р╢║ р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╖Е р╖Др╖Рр╢Ъ:
    {urls}

    р╢┤р╖Кр╢╗р╖Бр╖Кр╢▒р╢║р╢з р╢┤р╖Тр╖Ер╖Тр╢нр╖Фр╢╗р╖Ф р╢пр╖Ур╢╕р╢з р╢┤р╖Щр╢╗, р╖Гр╖Пр╢░р╢╗р╢л р╖Др╖П р╢Жр╢Ър╢╗р╖Кр╖Бр╢▒р╖Ур╢║ р╢Жр╢╗р╢╕р╖Кр╢╖р╢║р╢Ър╖К р╖Гр╖Др╖Тр╢нр╖А р╢┤р╖Тр╖Ер╖Тр╢нр╖Фр╢╗ р╢Жр╢╗р╢╕р╖Кр╢╖ р╢Ър╢╗р╢▒р╖Кр╢▒.

    р╢┤р╖Кр╢╗р╖Бр╖Кр╢▒р╢║: {question}

    р╢┤р╖Тр╖Ер╖Тр╢нр╖Фр╢╗:
    """

    # Select appropriate language template
    if lang == 'ta':
        prompt_text = template_ta
    elif lang == 'si':
        prompt_text = template_si
    else:
        prompt_text = template_en  # Default to English

    print(f"ЁЯФН Detected Language: {lang}")  # Debugging: Show detected language

    # Groq API call
    try:
        completion = client.chat.completions.create(
            model="llama3-70b-8192",
            messages=[{"role": "user", "content": prompt_text}],
            temperature=1,
            max_tokens=1024,
            top_p=1,
            stream=False,  # Avoid issues with streaming
            stop=None,
        )

        # Directly return the response
        return completion.choices[0].message.content.strip()

    except Exception as e:
        return f"An error occurred: {e}"

# Example usage
if __name__ == "__main__":
    while True:
        user_input = input("\nEnter your insurance question (or type 'exit' to quit): ")
        if user_input.lower() == 'exit':
            break
        response = get_response(user_input)
        print("\nResponse:\n", response)
